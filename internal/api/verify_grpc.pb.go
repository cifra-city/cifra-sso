// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: api/proto/verify.proto

package ssov1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Verify_VerifyEmail_FullMethodName      = "/auth.Verify/VerifyEmail"
	Verify_SendConfirmCode_FullMethodName  = "/auth.Verify/SendConfirmCode"
	Verify_CheckConfirmCode_FullMethodName = "/auth.Verify/CheckConfirmCode"
)

// VerifyClient is the client API for Verify service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VerifyClient interface {
	VerifyEmail(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	SendConfirmCode(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*InquiryResp, error)
	CheckConfirmCode(ctx context.Context, in *CheckConfirmCodeReq, opts ...grpc.CallOption) (*CheckConfirmCodeResp, error)
}

type verifyClient struct {
	cc grpc.ClientConnInterface
}

func NewVerifyClient(cc grpc.ClientConnInterface) VerifyClient {
	return &verifyClient{cc}
}

func (c *verifyClient) VerifyEmail(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Verify_VerifyEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verifyClient) SendConfirmCode(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*InquiryResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InquiryResp)
	err := c.cc.Invoke(ctx, Verify_SendConfirmCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verifyClient) CheckConfirmCode(ctx context.Context, in *CheckConfirmCodeReq, opts ...grpc.CallOption) (*CheckConfirmCodeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckConfirmCodeResp)
	err := c.cc.Invoke(ctx, Verify_CheckConfirmCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VerifyServer is the server API for Verify service.
// All implementations must embed UnimplementedVerifyServer
// for forward compatibility.
type VerifyServer interface {
	VerifyEmail(context.Context, *Empty) (*Empty, error)
	SendConfirmCode(context.Context, *Empty) (*InquiryResp, error)
	CheckConfirmCode(context.Context, *CheckConfirmCodeReq) (*CheckConfirmCodeResp, error)
	mustEmbedUnimplementedVerifyServer()
}

// UnimplementedVerifyServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVerifyServer struct{}

func (UnimplementedVerifyServer) VerifyEmail(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyEmail not implemented")
}
func (UnimplementedVerifyServer) SendConfirmCode(context.Context, *Empty) (*InquiryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendConfirmCode not implemented")
}
func (UnimplementedVerifyServer) CheckConfirmCode(context.Context, *CheckConfirmCodeReq) (*CheckConfirmCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckConfirmCode not implemented")
}
func (UnimplementedVerifyServer) mustEmbedUnimplementedVerifyServer() {}
func (UnimplementedVerifyServer) testEmbeddedByValue()                {}

// UnsafeVerifyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VerifyServer will
// result in compilation errors.
type UnsafeVerifyServer interface {
	mustEmbedUnimplementedVerifyServer()
}

func RegisterVerifyServer(s grpc.ServiceRegistrar, srv VerifyServer) {
	// If the following call pancis, it indicates UnimplementedVerifyServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Verify_ServiceDesc, srv)
}

func _Verify_VerifyEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerifyServer).VerifyEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Verify_VerifyEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerifyServer).VerifyEmail(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Verify_SendConfirmCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerifyServer).SendConfirmCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Verify_SendConfirmCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerifyServer).SendConfirmCode(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Verify_CheckConfirmCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckConfirmCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerifyServer).CheckConfirmCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Verify_CheckConfirmCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerifyServer).CheckConfirmCode(ctx, req.(*CheckConfirmCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Verify_ServiceDesc is the grpc.ServiceDesc for Verify service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Verify_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.Verify",
	HandlerType: (*VerifyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VerifyEmail",
			Handler:    _Verify_VerifyEmail_Handler,
		},
		{
			MethodName: "SendConfirmCode",
			Handler:    _Verify_SendConfirmCode_Handler,
		},
		{
			MethodName: "CheckConfirmCode",
			Handler:    _Verify_CheckConfirmCode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/verify.proto",
}
