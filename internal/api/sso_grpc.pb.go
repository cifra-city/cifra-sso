// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: api/proto/sso.proto

package ssov1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Auth_Logout_FullMethodName         = "/auth.Auth/Logout"
	Auth_Login_FullMethodName          = "/auth.Auth/Login"
	Auth_ChangePass_FullMethodName     = "/auth.Auth/ChangePass"
	Auth_ChangeUsername_FullMethodName = "/auth.Auth/ChangeUsername"
	Auth_ChangeEmail_FullMethodName    = "/auth.Auth/ChangeEmail"
)

// AuthClient is the client API for Auth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Auth service for authentication and authorization users
type AuthClient interface {
	Logout(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
	ChangePass(ctx context.Context, in *ChangePassReq, opts ...grpc.CallOption) (*Empty, error)
	ChangeUsername(ctx context.Context, in *ChangeUsernameReq, opts ...grpc.CallOption) (*Empty, error)
	ChangeEmail(ctx context.Context, in *ChangeEmailReq, opts ...grpc.CallOption) (*Empty, error)
}

type authClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthClient(cc grpc.ClientConnInterface) AuthClient {
	return &authClient{cc}
}

func (c *authClient) Logout(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Auth_Logout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, Auth_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) ChangePass(ctx context.Context, in *ChangePassReq, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Auth_ChangePass_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) ChangeUsername(ctx context.Context, in *ChangeUsernameReq, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Auth_ChangeUsername_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) ChangeEmail(ctx context.Context, in *ChangeEmailReq, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Auth_ChangeEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServer is the server API for Auth service.
// All implementations must embed UnimplementedAuthServer
// for forward compatibility.
//
// Auth service for authentication and authorization users
type AuthServer interface {
	Logout(context.Context, *Empty) (*Empty, error)
	Login(context.Context, *LoginReq) (*LoginResp, error)
	ChangePass(context.Context, *ChangePassReq) (*Empty, error)
	ChangeUsername(context.Context, *ChangeUsernameReq) (*Empty, error)
	ChangeEmail(context.Context, *ChangeEmailReq) (*Empty, error)
	mustEmbedUnimplementedAuthServer()
}

// UnimplementedAuthServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAuthServer struct{}

func (UnimplementedAuthServer) Logout(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedAuthServer) Login(context.Context, *LoginReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAuthServer) ChangePass(context.Context, *ChangePassReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePass not implemented")
}
func (UnimplementedAuthServer) ChangeUsername(context.Context, *ChangeUsernameReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeUsername not implemented")
}
func (UnimplementedAuthServer) ChangeEmail(context.Context, *ChangeEmailReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeEmail not implemented")
}
func (UnimplementedAuthServer) mustEmbedUnimplementedAuthServer() {}
func (UnimplementedAuthServer) testEmbeddedByValue()              {}

// UnsafeAuthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServer will
// result in compilation errors.
type UnsafeAuthServer interface {
	mustEmbedUnimplementedAuthServer()
}

func RegisterAuthServer(s grpc.ServiceRegistrar, srv AuthServer) {
	// If the following call pancis, it indicates UnimplementedAuthServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Auth_ServiceDesc, srv)
}

func _Auth_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).Logout(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_ChangePass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePassReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).ChangePass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_ChangePass_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).ChangePass(ctx, req.(*ChangePassReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_ChangeUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeUsernameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).ChangeUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_ChangeUsername_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).ChangeUsername(ctx, req.(*ChangeUsernameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_ChangeEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeEmailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).ChangeEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_ChangeEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).ChangeEmail(ctx, req.(*ChangeEmailReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Auth_ServiceDesc is the grpc.ServiceDesc for Auth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Auth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.Auth",
	HandlerType: (*AuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Logout",
			Handler:    _Auth_Logout_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Auth_Login_Handler,
		},
		{
			MethodName: "ChangePass",
			Handler:    _Auth_ChangePass_Handler,
		},
		{
			MethodName: "ChangeUsername",
			Handler:    _Auth_ChangeUsername_Handler,
		},
		{
			MethodName: "ChangeEmail",
			Handler:    _Auth_ChangeEmail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/sso.proto",
}

const (
	Reg_Register_FullMethodName = "/auth.Reg/Register"
)

// RegClient is the client API for Reg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RegClient interface {
	Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*Empty, error)
}

type regClient struct {
	cc grpc.ClientConnInterface
}

func NewRegClient(cc grpc.ClientConnInterface) RegClient {
	return &regClient{cc}
}

func (c *regClient) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Reg_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegServer is the server API for Reg service.
// All implementations must embed UnimplementedRegServer
// for forward compatibility.
type RegServer interface {
	Register(context.Context, *RegisterReq) (*Empty, error)
	mustEmbedUnimplementedRegServer()
}

// UnimplementedRegServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRegServer struct{}

func (UnimplementedRegServer) Register(context.Context, *RegisterReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedRegServer) mustEmbedUnimplementedRegServer() {}
func (UnimplementedRegServer) testEmbeddedByValue()             {}

// UnsafeRegServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RegServer will
// result in compilation errors.
type UnsafeRegServer interface {
	mustEmbedUnimplementedRegServer()
}

func RegisterRegServer(s grpc.ServiceRegistrar, srv RegServer) {
	// If the following call pancis, it indicates UnimplementedRegServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Reg_ServiceDesc, srv)
}

func _Reg_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Reg_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegServer).Register(ctx, req.(*RegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Reg_ServiceDesc is the grpc.ServiceDesc for Reg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Reg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.Reg",
	HandlerType: (*RegServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Reg_Register_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/sso.proto",
}

const (
	Verify_VerifyEmail_FullMethodName      = "/auth.Verify/VerifyEmail"
	Verify_InquiryForChange_FullMethodName = "/auth.Verify/InquiryForChange"
	Verify_AccessForChanges_FullMethodName = "/auth.Verify/AccessForChanges"
)

// VerifyClient is the client API for Verify service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VerifyClient interface {
	VerifyEmail(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	InquiryForChange(ctx context.Context, in *InquiryReq, opts ...grpc.CallOption) (*InquiryResp, error)
	AccessForChanges(ctx context.Context, in *AccessReq, opts ...grpc.CallOption) (*AccessResp, error)
}

type verifyClient struct {
	cc grpc.ClientConnInterface
}

func NewVerifyClient(cc grpc.ClientConnInterface) VerifyClient {
	return &verifyClient{cc}
}

func (c *verifyClient) VerifyEmail(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Verify_VerifyEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verifyClient) InquiryForChange(ctx context.Context, in *InquiryReq, opts ...grpc.CallOption) (*InquiryResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InquiryResp)
	err := c.cc.Invoke(ctx, Verify_InquiryForChange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verifyClient) AccessForChanges(ctx context.Context, in *AccessReq, opts ...grpc.CallOption) (*AccessResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccessResp)
	err := c.cc.Invoke(ctx, Verify_AccessForChanges_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VerifyServer is the server API for Verify service.
// All implementations must embed UnimplementedVerifyServer
// for forward compatibility.
type VerifyServer interface {
	VerifyEmail(context.Context, *Empty) (*Empty, error)
	InquiryForChange(context.Context, *InquiryReq) (*InquiryResp, error)
	AccessForChanges(context.Context, *AccessReq) (*AccessResp, error)
	mustEmbedUnimplementedVerifyServer()
}

// UnimplementedVerifyServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVerifyServer struct{}

func (UnimplementedVerifyServer) VerifyEmail(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyEmail not implemented")
}
func (UnimplementedVerifyServer) InquiryForChange(context.Context, *InquiryReq) (*InquiryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InquiryForChange not implemented")
}
func (UnimplementedVerifyServer) AccessForChanges(context.Context, *AccessReq) (*AccessResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccessForChanges not implemented")
}
func (UnimplementedVerifyServer) mustEmbedUnimplementedVerifyServer() {}
func (UnimplementedVerifyServer) testEmbeddedByValue()                {}

// UnsafeVerifyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VerifyServer will
// result in compilation errors.
type UnsafeVerifyServer interface {
	mustEmbedUnimplementedVerifyServer()
}

func RegisterVerifyServer(s grpc.ServiceRegistrar, srv VerifyServer) {
	// If the following call pancis, it indicates UnimplementedVerifyServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Verify_ServiceDesc, srv)
}

func _Verify_VerifyEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerifyServer).VerifyEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Verify_VerifyEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerifyServer).VerifyEmail(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Verify_InquiryForChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InquiryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerifyServer).InquiryForChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Verify_InquiryForChange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerifyServer).InquiryForChange(ctx, req.(*InquiryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Verify_AccessForChanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerifyServer).AccessForChanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Verify_AccessForChanges_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerifyServer).AccessForChanges(ctx, req.(*AccessReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Verify_ServiceDesc is the grpc.ServiceDesc for Verify service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Verify_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.Verify",
	HandlerType: (*VerifyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VerifyEmail",
			Handler:    _Verify_VerifyEmail_Handler,
		},
		{
			MethodName: "InquiryForChange",
			Handler:    _Verify_InquiryForChange_Handler,
		},
		{
			MethodName: "AccessForChanges",
			Handler:    _Verify_AccessForChanges_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/sso.proto",
}
