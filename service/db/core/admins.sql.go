// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: admins.sql

package core

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const deleteAdminByID = `-- name: DeleteAdminByID :exec
DELETE FROM admins
WHERE id = $1
`

func (q *Queries) DeleteAdminByID(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteAdminByID, id)
	return err
}

const getAdminByID = `-- name: GetAdminByID :one
SELECT id, uid, name, created_at FROM admins
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAdminByID(ctx context.Context, id int32) (Admin, error) {
	row := q.db.QueryRowContext(ctx, getAdminByID, id)
	var i Admin
	err := row.Scan(
		&i.ID,
		&i.Uid,
		&i.Name,
		&i.CreatedAt,
	)
	return i, err
}

const getAdminByUID = `-- name: GetAdminByUID :one
SELECT id, uid, name, created_at FROM admins
WHERE uid = $1 LIMIT 1
`

func (q *Queries) GetAdminByUID(ctx context.Context, uid uuid.NullUUID) (Admin, error) {
	row := q.db.QueryRowContext(ctx, getAdminByUID, uid)
	var i Admin
	err := row.Scan(
		&i.ID,
		&i.Uid,
		&i.Name,
		&i.CreatedAt,
	)
	return i, err
}

const insertAdmin = `-- name: InsertAdmin :one
INSERT INTO admins (
    uid,
    name
) VALUES (
             $1, $2
         ) RETURNING id, uid, name, created_at
`

type InsertAdminParams struct {
	Uid  uuid.NullUUID
	Name sql.NullString
}

func (q *Queries) InsertAdmin(ctx context.Context, arg InsertAdminParams) (Admin, error) {
	row := q.db.QueryRowContext(ctx, insertAdmin, arg.Uid, arg.Name)
	var i Admin
	err := row.Scan(
		&i.ID,
		&i.Uid,
		&i.Name,
		&i.CreatedAt,
	)
	return i, err
}

const listAdmins = `-- name: ListAdmins :many
SELECT id, uid, name, created_at FROM admins
ORDER BY created_at
`

func (q *Queries) ListAdmins(ctx context.Context) ([]Admin, error) {
	rows, err := q.db.QueryContext(ctx, listAdmins)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Admin
	for rows.Next() {
		var i Admin
		if err := rows.Scan(
			&i.ID,
			&i.Uid,
			&i.Name,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAdminByID = `-- name: UpdateAdminByID :one
UPDATE admins
SET
    name = $2,
    uid = $3
WHERE id = $1
    RETURNING id, uid, name, created_at
`

type UpdateAdminByIDParams struct {
	ID   int32
	Name sql.NullString
	Uid  uuid.NullUUID
}

func (q *Queries) UpdateAdminByID(ctx context.Context, arg UpdateAdminByIDParams) (Admin, error) {
	row := q.db.QueryRowContext(ctx, updateAdminByID, arg.ID, arg.Name, arg.Uid)
	var i Admin
	err := row.Scan(
		&i.ID,
		&i.Uid,
		&i.Name,
		&i.CreatedAt,
	)
	return i, err
}
